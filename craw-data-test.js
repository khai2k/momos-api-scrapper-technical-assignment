import { getJson } from "serpapi";
import fs from "fs";
import dotenv from "dotenv";
dotenv.config();

// Danh s√°ch 40 t·ª´ kh√≥a
const keywords = [
  // üì∞ X√£ h·ªôi & Th·ªùi s·ª±
  "b√°o", "ch√≠nh tr·ªã", "x√£ h·ªôi", "gi√°o d·ª•c", "y t·∫ø", "ph√°p lu·∫≠t", "m√¥i tr∆∞·ªùng", "giao th√¥ng",
  "an ninh", "ngo·∫°i giao", "kinh t·∫ø", "vƒÉn h√≥a", "th·ªùi s·ª±", "ƒë·ªùi s·ªëng", "lao ƒë·ªông", "ph√∫c l·ª£i",
  "ch√≠nh s√°ch", "b·∫ßu c·ª≠", "qu·ªëc h·ªôi", "bi·ªÉn ƒë·∫£o", "n√¥ng th√¥n", "th√†nh ph·ªë th√¥ng minh", "ch·ªëng tham nh≈©ng", "ph√°t tri·ªÉn b·ªÅn v·ªØng",
  "vi·ªác l√†m", "b√¨nh ƒë·∫≥ng gi·ªõi", "quy·ªÅn con ng∆∞·ªùi",

  // ‚öΩ Th·ªÉ thao
  "b√≥ng ƒë√°", "b√≥ng r·ªï", "th·ªÉ h√¨nh", "c·∫ßu l√¥ng", "ch·∫°y b·ªô", "b∆°i l·ªôi", "v√µ thu·∫≠t", "tennis",
  "ƒëua xe", "c·ªù vua", "eSports", "hu·∫•n luy·ªán vi√™n", "Olympic", "b√≥ng chuy·ªÅn", "b·∫Øn cung", "karatedo",
  "th·ªÉ d·ª•c d·ª•ng c·ª•", "th·ªÉ thao h·ªçc ƒë∆∞·ªùng", "gi·∫£i v√¥ ƒë·ªãch qu·ªëc gia", "b√≥ng b√†n", "b√≥ng ch√†y", "th·ªÉ thao n·ªØ", "th·ªÉ thao qu·ªëc t·∫ø", "th·ªÉ thao phong tr√†o",

  // üíº Kinh doanh & T√†i ch√≠nh
  "b·∫•t ƒë·ªông s·∫£n", "ch·ª©ng kho√°n", "th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠", "ng√¢n h√†ng", "t√†i ch√≠nh", "ƒë·∫ßu t∆∞", "kh·ªüi nghi·ªáp", "marketing",
  "xu·∫•t nh·∫≠p kh·∫©u", "qu·∫£n tr·ªã doanh nghi·ªáp", "b√°n l·∫ª", "chu·ªói cung ·ª©ng", "th∆∞∆°ng hi·ªáu", "ph√¢n t√≠ch th·ªã tr∆∞·ªùng", "doanh nh√¢n", "k·∫ø to√°n",
  "kinh t·∫ø s·ªë", "ƒë·ªïi m·ªõi s√°ng t·∫°o", "logistics", "th·ªã tr∆∞·ªùng lao ƒë·ªông", "th·ªã tr∆∞·ªùng v√†ng", "ngo·∫°i t·ªá", "ng√¢n h√†ng s·ªë", "b·∫£o hi·ªÉm nh√¢n th·ªç",

  // üíª C√¥ng ngh·ªá & Khoa h·ªçc
  "tr√≠ tu·ªá nh√¢n t·∫°o", "blockchain", "ƒëi·ªán to√°n ƒë√°m m√¢y", "ph·∫ßn m·ªÅm m√£ ngu·ªìn m·ªü", "l·∫≠p tr√¨nh web", "khoa h·ªçc d·ªØ li·ªáu", "robot", "nƒÉng l∆∞·ª£ng t√°i t·∫°o",
  "an ninh m·∫°ng", "m√°y h·ªçc", "ph√¢n t√≠ch d·ªØ li·ªáu", "c√¥ng ngh·ªá sinh h·ªçc", "ƒëi·ªán t·ª≠", "vi·ªÖn th√¥ng", "Internet v·∫°n v·∫≠t", "th·ª±c t·∫ø ·∫£o",
  "chip b√°n d·∫´n", "5G", "t·ª± ƒë·ªông h√≥a", "m√°y t√≠nh l∆∞·ª£ng t·ª≠", "ph√°t tri·ªÉn ph·∫ßn m·ªÅm", "th·ªã gi√°c m√°y t√≠nh", "c√¥ng ngh·ªá t√†i ch√≠nh", "ƒëi·ªán to√°n bi√™n",

  // üåç Du l·ªãch & VƒÉn h√≥a
  "du l·ªãch", "·∫©m th·ª±c", "phim ·∫£nh", "√¢m nh·∫°c", "th·ªùi trang", "gi√°o d·ª•c tr·∫ª em", "s·ª©c kh·ªèe tinh th·∫ßn", "n√¥ng nghi·ªáp th√¥ng minh",
  "m·ªπ ph·∫©m", "th·ªÉ d·ª•c", "gia ƒë√¨nh", "vƒÉn h·ªçc", "n·ªôi th·∫•t", "ki·∫øn tr√∫c", "thi·∫øt k·∫ø", "·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë",
  "ƒëi·ªÉm du l·ªãch", "ƒë·∫∑c s·∫£n", "vƒÉn h√≥a d√¢n gian", "ngh·ªá thu·∫≠t truy·ªÅn th·ªëng", "du l·ªãch sinh th√°i", "di s·∫£n vƒÉn h√≥a", "ngh·ªá sƒ©", "l·ªÖ h·ªôi Vi·ªát Nam",

  // üå± M√¥i tr∆∞·ªùng & N√¥ng nghi·ªáp
  "bi·∫øn ƒë·ªïi kh√≠ h·∫≠u", "nƒÉng l∆∞·ª£ng xanh", "r√°c th·∫£i nh·ª±a", "t√°i ch·∫ø", "b·∫£o v·ªá ƒë·ªông v·∫≠t", "n√¥ng nghi·ªáp h·ªØu c∆°", "l√¢m nghi·ªáp", "ƒë·∫•t hi·∫øm",
  "n∆∞·ªõc s·∫°ch", "√¥ nhi·ªÖm kh√¥ng kh√≠", "t√†i nguy√™n thi√™n nhi√™n", "th·ªßy s·∫£n", "tr·ªìng r·ª´ng", "n√¥ng nghi·ªáp b·ªÅn v·ªØng", "canh t√°c th√¥ng minh", "n√¥ng s·∫£n Vi·ªát Nam",

  // üí¨ Truy·ªÅn th√¥ng & X√£ h·ªôi s·ªë
  "m·∫°ng x√£ h·ªôi", "truy·ªÅn th√¥ng", "b√°o ƒëi·ªán t·ª≠", "podcast", "video ng·∫Øn", "n·ªôi dung s·ªë", "qu·∫£ng c√°o tr·ª±c tuy·∫øn", "s·∫£n xu·∫•t n·ªôi dung",
  "t∆∞∆°ng t√°c ng∆∞·ªùi d√πng", "influencer", "x√¢y d·ª±ng th∆∞∆°ng hi·ªáu c√° nh√¢n", "truy·ªÅn h√¨nh", "ph√°t thanh", "b√°o ch√≠ s·ªë", "xu h∆∞·ªõng m·∫°ng", "tin gi·∫£",

  // üéì Gi√°o d·ª•c & Nh√¢n s·ª±
  "h·ªçc tr·ª±c tuy·∫øn", "du h·ªçc", "k·ªπ nƒÉng m·ªÅm", "ph√°t tri·ªÉn b·∫£n th√¢n", "tuy·ªÉn d·ª•ng", "nh√¢n s·ª±", "ƒë√†o t·∫°o ngh·ªÅ", "h·ªçc b·ªïng",
  "nghi√™n c·ª©u khoa h·ªçc", "tr∆∞·ªùng ƒë·∫°i h·ªçc", "gi√°o vi√™n", "gi·∫£ng vi√™n", "c√¥ng ngh·ªá gi√°o d·ª•c", "gi√°o tr√¨nh s·ªë", "k·ª≥ thi qu·ªëc gia", "ph√°t tri·ªÉn k·ªπ nƒÉng s·ªë",

  // ‚ù§Ô∏è S·ª©c kh·ªèe & ƒê·ªùi s·ªëng
  "dinh d∆∞·ª°ng", "b·ªánh ti·ªÉu ƒë∆∞·ªùng", "huy·∫øt √°p", "chƒÉm s√≥c s·ª©c kh·ªèe", "thi·ªÅn", "y h·ªçc c·ªï truy·ªÅn", "t√¢m l√Ω h·ªçc", "s·ª©c kh·ªèe sinh s·∫£n",
  "b√°c sƒ© gia ƒë√¨nh", "th·ª±c ph·∫©m ch·ª©c nƒÉng", "ch·∫ø ƒë·ªô ƒÉn u·ªëng", "ph√≤ng ch·ªëng d·ªãch", "gi·∫•c ng·ªß", "th·ªÉ d·ª•c bu·ªïi s√°ng", "b·∫£o hi·ªÉm y t·∫ø", "b·ªánh vi·ªán c√¥ng",

  // üè† X√¢y d·ª±ng & Giao th√¥ng
  "h·∫° t·∫ßng", "x√¢y d·ª±ng d√¢n d·ª•ng", "c·∫ßu ƒë∆∞·ªùng", "giao th√¥ng c√¥ng c·ªông", "quy ho·∫°ch ƒë√¥ th·ªã", "nh√† ·ªü x√£ h·ªôi", "ki·∫øn tr√∫c xanh", "giao th√¥ng th√¥ng minh",
  "v·∫≠t li·ªáu x√¢y d·ª±ng", "c∆° kh√≠", "x√¢y d·ª±ng b·ªÅn v·ªØng", "qu·∫£n l√Ω ƒë√¥ th·ªã", "thi·∫øt k·∫ø c·∫ßu ƒë∆∞·ªùng", "an to√†n giao th√¥ng"
];


// üîë API key SerpAPI
const API_KEY = process.env.SERP_API_KEY;

console.log("API_KEY", API_KEY);
async function main() {
  const allUrls = new Set();
  const MAX_URLS = 1000;

  for (const keyword of keywords) {
    // Stop if we already have enough URLs
    if (allUrls.size >= MAX_URLS) {
      console.log(`üõë Reached maximum of ${MAX_URLS} URLs. Stopping search.`);
      break;
    }

    console.log(`üîç Searching: ${keyword}`);

    try {
      const data = await getJson({
        engine: "google",
        q: keyword,
        num: 100,
        hl: "vi",
        api_key: API_KEY,
      });

      const urls = (data.organic_results || [])
        .map(r => r.link)
        .filter(Boolean);

      // Only add URLs until we reach the limit
      for (const url of urls) {
        if (allUrls.size >= MAX_URLS) {
          break;
        }
        allUrls.add(url);
      }

      console.log(`‚úÖ Found ${urls.length} URLs for "${keyword}" (Total: ${allUrls.size})`);
    } catch (err) {
      console.error(`‚ùå Error searching "${keyword}":`, err.message);
    }

  }

  const result = {
    totalUrls: allUrls.size,
    urls: Array.from(allUrls),
    timestamp: new Date().toISOString(),
  };

  fs.writeFileSync("data-test.json", JSON.stringify(result, null, 2));
  console.log(`\n‚úÖ Done. Saved ${result.totalUrls} URLs to results.json`);
}

main();